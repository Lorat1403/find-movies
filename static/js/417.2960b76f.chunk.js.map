{"version":3,"file":"static/js/417.2960b76f.chunk.js","mappings":"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","sources":["components/Box.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","constants/constants.js","services/getMoviesAndInfo.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n  shadow,\n  typography,\n} from 'styled-system';\n\nexport const Box = styled('section')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n  shadow,\n  typography\n);\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  gap: ${p => p.theme.space[5]}px;\n`;\n\nexport const ListItem = styled.li`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  flex-basis: calc((100% - ${p => p.theme.space[6]}px) / 4);\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - ${p => p.theme.space[5]}px) / 5);\n  }\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - ${p => p.theme.space[4]}px * 2) / 6);\n  }\n`;\n\nexport const CastImg = styled.img`\n  width: 200px;\n  height: 200px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services/getMoviesAndInfo';\nimport { IMG_PATH } from 'constants/constants';\nimport { CastImg, List, ListItem } from './Cast.styled';\nimport { Box } from 'components/Box';\n\nconst NO_IMAGE = 'https://cdn-icons-png.flaticon.com/512/2922/2922506.png';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    (async function getCastInfo() {\n      const castInfo = await getCast(movieId);\n      setCast(castInfo);\n    })();\n  }, [movieId]);\n\n  return (\n    <Box>\n      <List>\n        {cast.map(({ id, name, profile_path, character }) => {\n          return (\n            <ListItem key={id}>\n              <CastImg\n                src={profile_path ? IMG_PATH + profile_path : NO_IMAGE}\n                alt={name}\n                loading=\"lazy\"\n              />\n              <Box as=\"p\" my=\"3\">\n                {name}\n              </Box>\n              <Box as=\"p\" mb=\"3\">\n                Character: {character}\n              </Box>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\n\nexport default Cast;\n","export const STATUS = {\n  idle: 'IDLE',\n  pending: 'PENDING',\n  resolved: 'RESOLVED',\n  rejected: 'REJECTED',\n};\n\nexport const IMG_PATH = 'https://image.tmdb.org/t/p/w500/';\nexport const DEFAULT_IMG =\n  'https://yt3.ggpht.com/AAKF_677TIvjFz_9xFF0R6PgiVd0kRpEtY6APSxSDRP65nXg8hkn9NFsz2bRd9_Z37DJ9D_b=s900-c-k-c0x00ffffff-no-rj';\n","import axios from 'axios';\nconst API_KEY = '6d25a4756e0ff1ccca3eba13a74efa5c';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'day';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\n\nexport const fetchTrendingToday = async () => {\n  try {\n    const response = await axios.get(`trending/${MEDIA_TYPE}/${TIME_WINDOW}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const ID = Number(movieId);\n    const response = await axios.get(`movie/${ID}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCast = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieBySearch = async query => {\n  try {\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","shadow","typography","List","p","theme","ListItem","CastImg","useState","cast","setCast","movieId","useParams","useEffect","getCast","castInfo","map","id","name","profile_path","character","src","IMG_PATH","alt","loading","as","my","mb","STATUS","idle","pending","resolved","rejected","DEFAULT_IMG","API_KEY","axios","fetchTrendingToday","params","api_key","response","data","results","console","log","getMovieById","ID","Number","getReviews","getMovieBySearch","query"],"sourceRoot":""}